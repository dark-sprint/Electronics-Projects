#include <ESP8266WiFi.h>
#include <ESP8266Ping.h>
#include <ESP_Mail_Client.h>

bool firstBoot = true; // variable global

// ===== CONFIGURACIÓN RED =====
const char* ssid = "TU_WIFI";
const char* password = "TU_PASSWORD";

// ===== CONFIGURACIÓN CORREO =====
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 587
#define AUTHOR_EMAIL "TU_CORREO@gmail.com"
#define AUTHOR_PASSWORD "TU_APP_PASSWORD"
#define RECIPIENT_EMAIL "DESTINO@gmail.com"

// ===== ARRAY DE HOSTS =====
struct Host {
  const char* ip;
  const char* name;
  bool isUp;
  unsigned long lastEmailTime;
};

// hasta ~15 hosts sin riesgo de colapso, máximo 20 hosts (se pueden saturar los recursos).
Host hosts[] = {
  {"192.168.1.1", "Router", true, 0},
  {"192.168.1.100", "Servidor NAS", true, 0},
  {"192.168.1.101", "PC Oficina", true, 0},
  {"192.168.1.102", "Servidor Media", true, 0},
  {"192.168.1.103", "Laptop", true, 0},
  {"192.168.1.104", "Impresora", true, 0},
  {"192.168.1.105", "Raspberry", true, 0},
  {"192.168.1.106", "Smart TV", true, 0},
  {"192.168.1.107", "CCTV", true, 0},
  {"192.168.1.108", "Servidor Backup", true, 0},
  {"192.168.1.109", "PC Gamer", true, 0},
  {"192.168.1.110", "NAS 2", true, 0},
  {"192.168.1.111", "Router Secundario", true, 0},
  {"192.168.1.112", "Tablet", true, 0},
  {"192.168.1.113", "Smartphone", true, 0}
};
const int numHosts = sizeof(hosts) / sizeof(hosts[0]);

// ===== PIN DEL PIR =====
const int pirPin = D2;
unsigned long lastMotionEmail = 0;
const unsigned long motionDelay = 10000;

// ===== OBJETO SMTP =====
SMTPSession smtp;

// ===== VARIABLES =====
unsigned long lastPingTime = 0;
const unsigned long pingInterval = 5000; // Ping cada 5 segundos
int currentHost = 0;

// ===== FUNCIONES =====
void sendEmail(const char* subject, const char* message) {
  SMTP_Message mail;
  mail.sender.name = "ESP8266 Watcher";
  mail.sender.email = AUTHOR_EMAIL;
  mail.subject = subject;
  mail.addRecipient("Admin", RECIPIENT_EMAIL);
  mail.text.content = message;

  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  if (!smtp.connect(&session)) {
    Serial.println("Error conectando a SMTP");
    return;
  }

  if (!MailClient.sendMail(&smtp, &mail)) {
    Serial.println("Error enviando correo: " + smtp.errorReason());
  } else {
    Serial.println("Correo enviado correctamente: " + String(subject));
  }

  smtp.closeSession();
}

// ===== SETUP =====
void setup() {
  Serial.begin(115200);
  pinMode(pirPin, INPUT);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado!");
}

// ===== LOOP PRINCIPAL =====
void loop() {
  unsigned long currentMillis = millis();

  // --- PRIMER MENSAJE AL ENCENDER ---
  if (firstBoot) {
    sendEmail("🔔 ESP8266 Encendido", "El ESP8266 Network + Motion Watcher se ha iniciado.");
    firstBoot = false; // Evita que se vuelva a enviar
  }

  // --- PING ROTATIVO DE HOSTS ---
  if (currentMillis - lastPingTime >= pingInterval) {
    lastPingTime = currentMillis;

    Host &h = hosts[currentHost];
    bool pingResult = Ping.ping(h.ip, 1);

    if (pingResult != h.isUp) {
      h.isUp = pingResult;
      if (currentMillis - h.lastEmailTime >= 10000) {
        h.lastEmailTime = currentMillis;

        char subject[64];
        char message[128];
        if (pingResult) {
          snprintf(subject, sizeof(subject), "✅ %s UP", h.name);
          snprintf(message, sizeof(message), "%s (%s) está nuevamente UP.", h.name, h.ip);
        } else {
          snprintf(subject, sizeof(subject), "❌ %s DOWN", h.name);
          snprintf(message, sizeof(message), "%s (%s) está DOWN.", h.name, h.ip);
        }

        Serial.println(message);
        sendEmail(subject, message);
      }
    }

    // Pasar al siguiente host
    currentHost++;
    if (currentHost >= numHosts) currentHost = 0;
  }

  // --- DETECCIÓN DE MOVIMIENTO ---
  bool motion = digitalRead(pirPin) == HIGH;
  if (motion && currentMillis - lastMotionEmail >= motionDelay) {
    Serial.println("¡Movimiento detectado!");
    sendEmail("🚨 Movimiento detectado", "Se ha detectado movimiento en la zona monitoreada.");
    lastMotionEmail = currentMillis;
  }
}
