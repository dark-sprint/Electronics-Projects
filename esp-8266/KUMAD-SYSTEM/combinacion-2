#include <ESP8266WiFi.h>
#include <ESP8266Ping.h>
#include <ESP_Mail_Client.h>

bool firstBoot = true;

// CONFIGURACIÓN RED
const char* ssid = "TU_WIFI";
const char* password = "TU_PASSWORD";

// CONFIGURACIÓN CORREO
#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 587
#define AUTHOR_EMAIL "TU_CORREO@gmail.com"
#define AUTHOR_PASSWORD "TU_APP_PASSWORD"
#define RECIPIENT_EMAIL "DESTINO@gmail.com"

// PIN LED y PIR
const int ledPin = D4;
const int pirPin = D2;
unsigned long lastMotionEmail = 0;
const unsigned long motionDelay = 10000;

// PING ROTATIVO
unsigned long lastPingTime = 0;
const unsigned long pingInterval = 5000;
int currentHost = 0;

// OBJETO SMTP
SMTPSession smtp;

// Hosts con flapping
struct Host {
  const char* ip;
  const char* name;
  bool isUp;
  unsigned long lastEmailTime;
  int failCount; // contador de fallos consecutivos
};

Host hosts[] = {
  {"192.168.1.1", "Router", true, 0, 0},
  {"192.168.1.100", "Servidor NAS", true, 0, 0},
  {"192.168.1.101", "PC Oficina", true, 0, 0},
  {"192.168.1.102", "Servidor Media", true, 0, 0},
  {"192.168.1.103", "Laptop", true, 0, 0}
};
const int numHosts = sizeof(hosts)/sizeof(hosts[0]);

void sendEmail(const char* subject, const char* message) {
  SMTP_Message mail;
  mail.sender.name = "ESP8266 Watcher";
  mail.sender.email = AUTHOR_EMAIL;
  mail.subject = subject;
  mail.addRecipient("Admin", RECIPIENT_EMAIL);
  mail.text.content = message;

  ESP_Mail_Session session;
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  if (!smtp.connect(&session)) {
    Serial.println("Error conectando a SMTP");
    return;
  }

  if (!MailClient.sendMail(&smtp, &mail)) {
    Serial.println("Error enviando correo: " + smtp.errorReason());
  } else {
    Serial.println("Correo enviado correctamente: " + String(subject));
  }

  smtp.closeSession();
}

void setup() {
  Serial.begin(115200);
  pinMode(pirPin, INPUT);
  pinMode(ledPin, OUTPUT);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado!");
}

void loop() {
  unsigned long currentMillis = millis();

  // --- Revisión Wi-Fi ---
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi desconectado, reconectando...");
    WiFi.disconnect();
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("\nWiFi reconectado!");
  }

  // --- Primer correo al encender ---
  if (firstBoot) {
    sendEmail("🔔 ESP8266 Encendido", "El ESP8266 Network + Motion Watcher se ha iniciado.");
    firstBoot = false;
  }

  // --- Ping rotativo con flapping ---
  if (currentMillis - lastPingTime >= pingInterval) {
    lastPingTime = currentMillis;

    Host &h = hosts[currentHost];
    bool pingResult = Ping.ping(h.ip, 1);

    // FLAPPING: requiere 2 fallos consecutivos
    if (!pingResult) h.failCount++;
    else h.failCount = 0;

    bool actualState = h.isUp;
    if ((pingResult && !h.isUp) || (!pingResult && h.failCount >= 2)) {
      h.isUp = pingResult;

      // Consolidar alertas
      String alertMsg = "Estado de hosts:\n";
      for (int i = 0; i < numHosts; i++) {
        alertMsg += String(hosts[i].name) + ": " + (hosts[i].isUp ? "UP ✅" : "DOWN ❌") + "\n";
      }

      sendEmail("⚠️ Alerta Hosts", alertMsg.c_str());
      Serial.println(alertMsg);
    }

    currentHost++;
    if (currentHost >= numHosts) currentHost = 0;
  }

  // --- Detección de movimiento ---
  bool motion = digitalRead(pirPin) == HIGH;
  if (motion && currentMillis - lastMotionEmail >= motionDelay) {
    sendEmail("🚨 Movimiento detectado", "Se ha detectado movimiento en la zona monitoreada.");
    lastMotionEmail = currentMillis;
  }

  // --- LED de estado ---
  bool anyDown = false;
  for (int i = 0; i < numHosts; i++) {
    if (!hosts[i].isUp) anyDown = true;
  }
  if (anyDown || motion) digitalWrite(ledPin, HIGH); // rojo → alerta
  else digitalWrite(ledPin, LOW); // verde → todo OK

// -------------------------------------------------------------------------------------------------------------
// # instalar libreria de ping
// https://github.com/dancol90/ESP8266Ping
// Sketch > Include Library > Add .ZIP Library...

  delay(200);
}
